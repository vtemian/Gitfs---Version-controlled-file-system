@article{Merkel2014,
abstract = {Docker promises the ability to package applications and their dependencies into lightweight containers that move easily between different distros, start up quickly and are isolated from each other.},
author = {Merkel, Dirk},
doi = {10.1097/01.NND.0000320699.47006.a3},
isbn = {1075-3583},
issn = {1075-3583},
journal = {Linux Journal},
number = {239},
pages = {2},
title = {{Docker: lightweight Linux containers for consistent development and deployment}},
howpublished = {\url{http://dl.acm.org/ft{\_}gateway.cfm?id=2600241{\&}type=html$\backslash$nhttp://www.linuxjournal.com/content/docker-lightweight-linux-containers-consistent-development-and-deployment}},
volume = {2014},
year = {2014}
}

@article{Rosen2014,
abstract = {The article describes Linux-based containers and process-level virtualization in high performance computing (HPC). It cites projects using Linux-based containers including OpenVZ project for cloud services, the Google open-source container stack Let Me Contain That For You (lmctfy) and the LinuX Container (LXC). It also describes the management of LXC Container and HPC features including checkpoint/restore in userspace (CRIU), load balancing, cgroups and namespaces kernel.},
author = {Rosen, Rami},
issn = {1075-3583},
journal = {Linux Journal},
number = {239},
pages = {Article No.2},
title = {{Linux Containers and the Future Cloud}},
howpublished = {\url{http://dl.acm.org/citation.cfm?id=2600239.2600241{\&}coll=DL{\&}dl=ACM{\&}CFID=519220969{\&}CFTOKEN=85181838}},
volume = {2014},
year = {2014}
}

@article{Ben-Kiki2009,
abstract = {YAML (rhymes with camel) is a human-friendly, cross language, Unicode based data serialization language designed around the common native data types of agile programming languages. It is broadly useful for programming needs ranging from configuration files to Internet messaging to object persistence to data auditing. Together with the Unicode standard for characters, this specification provides all the information necessary to understand YAML Version 1.2 and to create programs that process YAML information.},
author = {Ben-Kiki, O and Evans, C and Ingerson, B},
journal = {Language},
pages = {1--100},
title = {{YAML Ain't Markup Language (YAML™) Version 1.2}},
howpublished = {\url{http://www.yaml.org/spec/1.2/spec.html}},
year = {2009}
}

@book{Aham-cumming2015,
abstract = {A significant proportion of those people who encounter the GNU Make utility do little more than invoke the program in its barest form. But there is a lot more to this software that those people imagine. And if you are a security practitioner or researcher who has cause to write software, familiarity with the full power of Make can be a considerable asset.},
author = {Aham-cumming, John G R},
booktitle = {Network Security},
doi = {10.1016/S1353-4858(15)30036-2},
isbn = {9781593276492},
issn = {13534858},
number = {5},
pages = {4},
title = {{The GNU Make Book}},
howpublished = {\url{http://www.sciencedirect.com/science/article/pii/S1353485815300362}},
volume = {2015},
year = {2015}
}

@article{Inozemtseva2014,
abstract = {The coverage of a test suite is often used as a proxy for its ability to detect faults. However, previous studies that investigated the correlation between code coverage and test suite e ectiveness have failed to reach a consensus about the nature and strength of the relationship between these test suite characteristics. Moreover, many of the studies were done with small or synthetic programs, making it unclear whether their results generalize to larger programs, and some of the studies did not account for the confounding in uence of test suite size. We have extended these studies by evaluating the relation- ship between test suite size, coverage, and e ectiveness for large Java programs. Our study is the largest to date in the literature: we generated 31,000 test suites for ve systems consisting of up to 724,000 lines of source code. We then mea- sured the statement coverage, decision coverage, and modi ed condition coverage of these suites and used mutation testing to evaluate their fault detection e ectiveness. We found that there is a low to moderate correlation between coverage and e ectiveness when the number of tests in the suite is controlled for. In addition, we found that stronger forms of coverage do not provide greater insight into the e ectiveness of the suite. Our results suggest that coverage, while useful for identifying under-tested parts of a program, should not be used as a quality target because it is not a good indicator of test suite e ectiveness.},
author = {Inozemtseva, Laura and Holmes, Reid},
doi = {10.1145/2568225.2568271},
isbn = {9781450327565},
journal = {Proc. ICSE},
keywords = {all or part of,classroom use is granted,copies are not made,coverage,ectiveness,or,or distributed,or hard copies of,permission to make digital,test suite e ff,test suite quality,this work for personal,without fee provided that},
pages = {435--445},
title = {{Coverage is not strongly correlated with test sute effectiness}},
year = {2014}
}

@book{Lewine1991,
abstract = {Title: POSIX Programmer's Guide - 1991 SubTitle: ; Volume: ; Serie: ; Edition: ; Authors: Lewine, Donald ; Year: 1991 ; Pages: 0 ; Editor: ; Publisher: O'Reilly ; ISBN: 0-937175-73-0 ; Keywords: ;},
author = {Lewine, Donald},
booktitle = {POSIX Programmer's Guide - 1991},
isbn = {0-937175-73-0},
number = {March 1994},
pages = {0},
title = {{POSIX Programmer's Guide}},
howpublished = {\url{http://www.amazon.com/s/ref=nb{\_}sb{\_}noss?url=search-alias{\%}3Daps{\&}field-keywords=9780937175736}},
year = {1991}
}

@article{Sinclair2010,
abstract = {The Apache License, Version 2.0 is a widely used permissive open source software license which builds on the terms of other permissive open source licenses to produce a license with similar principles to those of licenses like the BSD License and MIT License, but with expanded terms. This article is short overview of the license.},
author = {Sinclair, Andrew},
doi = {10.5033/ifosslr.v2i2.42},
issn = {18776922},
journal = {International Free and Open Source Software Law Review},
keywords = {apache license,free and open source,information technology,law},
number = {2},
pages = {107--114},
title = {{Licence Profile: Apache License, Version 2.0}},
howpublished = {\url{http://www.ifosslr.org/ifosslr/article/view/42}},
volume = {2},
year = {2010}
}

@article{Rajgarhia2010,
abstract = {Several efforts have been made over the years for developing file systems in user space. Many of these efforts have failed to make a significant impact as measured by their use in production systems. Recently, however, user space file systems have seen ...},
author = {Rajgarhia, Aditya and Gehani, Ashish},
doi = {10.1145/1774088.1774130},
isbn = {9781605586380},
journal = {Proceedings of the 2010 ACM Symposium on Applied Computing SAC 10},
keywords = {fuse,java,language binding,performance,user space},
pages = {206},
title = {{Performance and extension of user space file systems}},
howpublished = {\url{http://portal.acm.org/citation.cfm?doid=1774088.1774130}},
year = {2010}
}

@misc{Spinellis2012,
abstract = {Git is a distributed revision control system available on all mainstream development platforms through a free software license. An important difference of git over its older ancestors is that it elevates the software's revisions to first-class citizens. Developers care deeply about software revisions, and git supports this by giving each developer a complete private copy of the software repository and numerous ways to manage revisions within its context. The ability to associate a local repository with numerous remote ones allows developers and their managers to build a variety of interesting distributed workflows, most of which are impossible to run on a traditional centralized version control system. The local repository also makes git responsive, easy to setup, and able to operate without Internet connectivity. GitHub is a git repository hosting provider that simplifies many repository management tasks through a Web-based user interface while also promoting cooperation in open source projects.},
author = {Spinellis, Diomidis},
booktitle = {IEEE Software},
doi = {10.1109/MS.2012.61},
issn = {07407459},
keywords = {GitHub,configuration management,distributed version control,git},
number = {3},
pages = {100--101},
title = {{Git}},
volume = {29},
year = {2012}
}

@article{Fielding1999,
abstract = {The Hypertext Transfer Protocol (HTTP) is an application-level protocol for distributed, collaborative, hypermedia information systems. It is a generic, stateless, protocol which can be used for many tasks beyond its use for hypertext, such as name servers and distributed object management systems, through extension of its request methods, error codes and headers [47]. A feature of HTTP is the typing and negotiation of data representation, allowing systems to be built independently of the data being transferred. HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as “HTTP/1.1”, and is an update to RFC 2068 [33].},
author = {Fielding, Roy and Gettys, James and Mogul, Jeff and Frystyk, Henrik and Masinter, Larry and Leach, P. and Berners-Lee, Tim},
doi = {http://www.ietf.org/rfc/rfc2616.txt},
journal = {Internet Engineering Task Force},
pages = {1--114},
title = {{RFC2616 - Hypertext transfer protocol–HTTP/1.1}},
howpublished = {\url{http://tools.ietf.org/html/rfc2616}},
year = {1999}
}

@article{Deacon2009,
abstract = {Synopsis: Although the MVC architecture (or pattern or idiom) has been around for a long time, and although it is important and widely used, much of the information regarding the idiom is available only as folklore rather than from textbooks. This note gives a short guide to ...},
author = {Deacon, John},
journal = {Computer Systems Development},
pages = {1--6},
title = {{Model-view-controller (mvc) architecture}},
howpublished = {\url{https://techsimplified2.com/Uploads/Agendas/October28,2011.pdf}},
year = {2009}
}

@misc{Drone2016,
  title = {{Drone CI} is a Continuous Delivery platform built on Docker, written in Go}},
  howpublished = {\url{https://drone.io/}},
  note = {Accessed: 2016-07-07}
}

@misc{Libgit2016,
  title = {Libgit2 is a portable, pure C implementation of the Git core methods},
  howpublished = {\url{https://libgit2.github.com/}},
  note = {Accessed: 2016-07-07}
}

@misc{Pygit2016,
  title = {Pygit2 a set of Python bindings to the libgit2 shared library},
  howpublished = {\url{https://github.com/libgit2/pygit2}},
  note = {Accessed: 2016-07-07}
}

@misc{Libfuse2016,
  title = {Libfuse - The reference implementation of the Linux FUSE (Filesystem in Userspace) interface},
  howpublished = {\url{https://github.com/libfuse/libfuse}},
  note = {Accessed: 2016-07-07}
}

@misc{Wordpress,
  title = {Wordpress - Open source CMS, written in PHP},
  howpublished = {\url{https://wordpress.org/about/}},
  note = {Accessed: 2016-07-07}
}

@misc{Gitium,
  title = {Gitium - Wordpress plugin which enables continuous deployment},
  howpublished = {\url{https://wordpress.org/plugins/gitium/}},
  note = {Accessed: 2016-07-07}
}

@misc{Django,
  title = {Django is a high-level Python Web framework},
  howpublished = {\url{https://www.djangoproject.com/}},
  note = {Accessed: 2016-07-07}
}

@misc{erofs,
  title = {Write permission was requested for a file on a read-only file system.},
  howpublished = {\url{http://linux.die.net/man/2/access}},
  note = {Accessed: 2016-07-07}
}

@misc{lru,
  title = {Least Recently Used cache overview and implementation},
  howpublished = {\url{http://mcicpc.cs.atu.edu/archives/2012/mcpc2012/lru/lru.html}},
  note = {Accessed: 2016-07-07}
}

@misc{FSA,
  title = {High level system arhitecture},
  howpublished = {\url{http://www.ibm.com/developerworks/library/l-linux-filesystem/figure1.gif}},
  note = {Accessed: 2016-07-07}
}

@misc{FuseArch,
  title = {System call flow in FUSE},
  howpublished = {\url{https://lastlog.de/misc/fuse-doc/doc/html/490px-FUSE_structure.svg.png}},
  note = {Accessed: 2016-07-07}
}

@misc{Commits,
  title = {Git's chain of commits and it's branches},
  howpublished = {\url{https://grapefruitgames.files.wordpress.com/2013/05/unitygitdiagram.png}},
  note = {Accessed: 2016-07-07}
}

@misc{GOBJ,
  title = {Git's internal objects},
  howpublished = {\url{https://git-scm.com/book/en/v2/book/10-git-internals/images/data-model-2.png}},
  note = {Accessed: 2016-07-07}
}

@misc{GDM,
  title = {Git's data model},
  howpublished = {\url{https://git-scm.com/book/en/v2/book/10-git-internals/images/data-model-3.png}},
  note = {Accessed: 2016-07-07}
}

@misc{GDR,
  title = {Github, Drone relationship},
  howpublished = {\url{http://image.slidesharecdn.com/rancherlabsoverview-aug15onlinemeetup-150814183957-lva1-app6892/95/building-a-scalable-ci-platform-using-docker-drone-and-rancher-20-638.jpg?cb=1439585795}},
  note = {Accessed: 2016-07-07}
}